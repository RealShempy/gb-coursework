@startuml
'Диаграмма контейнеров??? компонентов?
'https://plantuml.com/ru/component-diagram
'https://plantuml.com/ru/deployment-diagram тут нужные стрелки
'https://pdf.plantuml.net/PlantUML_Language_Reference_Guide_ru.pdf
'https://crashedmind.github.io/PlantUMLHitchhikersGuide/
'https://plugins.jetbrains.com/plugin/7017-plantuml-integration
'https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml

!theme vibrant
'skinparam monochrome true

!define SPRITESURL https://raw.githubusercontent.com/plantuml-stdlib/gilbarbara-plantuml-sprites/v1.0/sprites
!includeurl SPRITESURL/aws.puml
!includeurl SPRITESURL/kafka.puml

<style>
component {
  HorizontalAlignment center
}
</style>

title ""

'title
'<size:30>Диаграмма компонентов</size>
'end title
' Возможно это диаграмма контейнеров )))

'interface "WEB\nuser interface" as I_WEB
'interface "WEB\nmanager interface" as I_WEB_MANAGER
'interface "WEB\nClient interface" as I_WEB_Client ???

component API [
**API gateway**
service
Проверяет авторизацию,
осуществляет роутинг
]

[**FRONTEND**\nservice] as frontend
'note left of [frontend]
'Осуществляет раздачу SPA
'менеджерам, клиентам.
'end note

'I_WEB --- frontend
'I_WEB_MANAGER --- frontend

frontend .down. API

'rectangle "Message broker\nService\n <$kafka>" as ServicesCluster {
rectangle " " as ServicesCluster {
  [Requests service] as Request
  [Users service] as Users
  [Clients service] as Clients
  [Orders service] as Orders
'  [Clusters service] as Cluster
  [Tasks service] as Tasks
  [Upload service] as S3
  [Contracts service] as Contracts
  ' S3 должен ссылаться на внешний сервис осуществляющий хранение
  ' У каждого сервиса работающего с БД должен быть интерфейс и реализация репозитория

  API-->S3
  API-->Request
  API-->Users
  API-->Clients
  API-->Orders
  API-->Tasks
  API-->Contracts

  database UploadDB
  S3 --> UploadDB

  database RequestDB
  Request --> RequestDB

  database UsersDB
  Users --> UsersDB

  database ClientsDB
  Clients --> ClientsDB

  database OrdersDB
  Orders --> OrdersDB

  database TasksDB
  Tasks --> TasksDB

  database ContractsDB
  Contracts --> ContractsDB

'  kafka-down.S3
'  kafka-down.Request
'  kafka-down.Users
'  kafka-down.Clients
'  kafka-down.Orders
'  kafka-down.Tasks
'  kafka-down.Contracts
}

note top of ServicesCluster
  Сервисы подписаны на сообщения
  от CDC service и вносят изменения
end note

'left to right direction
top to bottom direction

queue "<$kafka>" as kafka
'Contracts --> S3
'Clients --> S3
'Tasks --> S3


S3 --- () "Облачное\nхранилище"

'Orders --> Tasks
'Orders --> Cluster
'Tasks --> Cluster

component CDC {

  database "**ODBC**" as replicaDB {
    label "Legacy DataBase"
  }

'  note right of [CDC]
'  Рассылает через брокер
'  сообщений информацию
'  об изменениях в легаси БД
'  end note
}

component "Notification\nservice" as Notify {
  [SMS sender] as SMS
  [Email sender] as Email
  [Telegram sender] as Telegram
  [Phone voice mail] as Phone
  [WebSockets]
  [Push]

  SMS-[hidden]->Email
  Email-[hidden]->Telegram
'  Telegram-->Phone
  Phone-[hidden]->[WebSockets]
  [WebSockets]-[hidden]->[Push]
}

Notify .up.> () "Сторонние\nсервисы\n "
'Notify -> frontend

'ServicesCluster ..> Notify
ServicesCluster .. kafka
Notify .down. kafka
CDC .up. kafka

legend top right
 **Внешние сервисы**
 ELK
 Tracers
 CDC Service
 S3 - облачные хранилища
 Сервис сбора данных для отчетов
 Сервис отчетов
end legend

@enduml