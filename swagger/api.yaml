openapi: 3.0.0
# https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.2.md

info:
  title: GB result project API
  version: 0.0.1

servers:
  - url: /api/v1/

tags:
  - name: Authorization
  - name: Users
  - name: Requests
  - name: Clients
  - name: Orders
  - name: Tasks

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  headers:
    RequestSuccess:
      schema:
        type: string
      description: "if the application has successfully processed the request, it returns success. If an error occurs during the processing of the request, it returns fail."

  responses:
    minimalResponse:
      description: "OK"

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    Conflict:
      description: Resource Already Exist
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"

    InternalError:
      description: Internal Server Error

  schemas:
    Error:
      type: object
      properties:
        error_code:
          type: string
        message:
          type: string
      required:
        - error_code
        - message

    Token:
      type: object
      properties:
        token:
          type: string
        refresh_token:
          type: string
    #--------------------------------------------
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"

    CreateUser:
      type: object
      properties:
        name:
          type: string
        account:
          type: string
        email:
          type: string
        phone:
          type: string

    UpdateUser:
      type: object
      properties:
        name:
          type: string
        account:
          type: string
        email:
          type: string
        phone:
          type: string

    #-----------------CLIENTS---------------------------
    Client:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        accountNum:
          description: "Номер лицевого счета"
          type: string
        email:
          type: string
        phone:
          type: string
        active:
          type: boolean
        userType:
          type: number
        contragent:
          $ref: "#/components/schemas/Contragent"

    Clients:
      type: array
      items:
        $ref: "#/components/schemas/Client"

    CreateClient:
      type: object
      properties:
        last_name:
          type: string
        first_name:
          type: string
        middle_name:
          type: string
        email:
          type: string
        phone:
          type: string
        user_type:
          type: number
          description: Физ/Юр лицо

    UpdateClient:
      type: object
      properties:
        name:
          type: string
        account:
          type: string
        email:
          type: string
        phone:
          type: string

    Contragent:
      type: object
      properties:
        id:
          type: string
        inn:
          type: string
        short_name:
          type: string
          description: "Название организации"
        balance:
          type: string
        account:
          description: "Номер договора"
          type: string
        email:
          type: string
        phone:
          type: string
        principal_name:
          type: string
          description: "Директор"
        status:
          type: number
        valid_for:
          type: string
          description: "Срок окончания договора"

    Order:
      type: object
      properties:
        id:
          type: string
        request_id:
          type: string
          description: "Номер обращения"
        status:
          type: string
        manager_id:
          type: string
          description: "Ответственный"
        created_at:
          type: string
        closed_at:
          type: string
        updated_at:
          type: string

    Orders:
      type: array
      items:
        $ref: "#/components/schemas/Order"

    Request:
      type: object

    Requests:
      type: array
      items:
        $ref: "#/components/schemas/Request"

    Task:
      type: object

    Tasks:
      type: array
      items:
        $ref: "#/components/schemas/Task"

    PaginationResult:
      type: object
      properties:
        page: { type: number, example: 3 }
        limit: { type: number, example: 20 }
        results: { type: array, items: {} }

paths:
  /auth:
    post:
      summary: "Авторизация по имени и паролю, возвращает JWT access and refresh tokens"
      tags:
        - Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      description: "Авторизация пользователя, получение токена доступа к методам API"
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/InternalError"
    put:
      summary: "Обновление access toker через refresh token"
      tags:
        - Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/Token"
                - required:
                    - refresh_token
      description: "Авторизация пользователя, обмен refresh_token на access_token для доступа к методам API"
      responses:
        '201':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/InternalError"
  /signup:
    post:
      summary: "create new user"
      tags:
        - Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/CreateUser"
      description: "Авторизация пользователя, получение токена доступа к методам API"
      responses:
        '201':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        '401':
          $ref: "#/components/responses/Unauthorized"
        '400':
          $ref: "#/components/responses/BadRequest"
        '500':
          $ref: "#/components/responses/InternalError"

  /clients/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: идентификатор клиента
        schema:
          type: string
    get:
      tags:
        - Clients
      summary: Получить клиента по ID
      operationId: getClientByID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clients"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalError"

    patch:
      tags:
        - Clients
      summary: ""
      operationId: updateClient
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UpdateClient"
      responses:
        '200':
          description: OK
        '500':
          $ref: "#/components/responses/InternalError"

  /clients:
    get:
      summary: "Список клиентов"
      tags:
        - Clients
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Страница
          required: false
          explode: true
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Выводить по
          required: false
          explode: true
          schema:
            type: integer
            default: 10
        - name: phone
          in: query
          description: Номер телефона
          required: true
          explode: true
          schema:
            type: string
        - name: address
          in: query
          description: Адрес
          required: false
          explode: true
          schema:
            type: string
        - name: name
          in: query
          description: ФИО
          required: false
          explode: true
          schema:
            type: string
        - name: account
          in: query
          description: Номер лицевого счета
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginationResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Clients"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalError"
    post:
      summary: "Создать клиента"
      tags:
        - Clients
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateClient"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Clients"
        '400':
          $ref: "#/components/responses/BadRequest"
        '409':
          $ref: "#/components/responses/Conflict"
        '500':
          $ref: "#/components/responses/InternalError"


  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: идентификатор пользователя
        schema:
          type: string
    get:
      tags:
        - Users
      summary: Получить пользователя по ID
      operationId: getUserByID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalError"

    patch:
      tags:
        - Users
      summary: ""
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UpdateUser"
      responses:
        '200':
          description: OK
        '500':
          $ref: "#/components/responses/InternalError"

  /users:
    get:
      summary: "Список пользователей"
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Страница
          required: false
          explode: true
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Выводить по
          required: false
          explode: true
          schema:
            type: integer
            default: 10
        - name: phone
          in: query
          description: Номер телефона
          required: true
          explode: true
          schema:
            type: string
        - name: address
          in: query
          description: Адрес
          required: false
          explode: true
          schema:
            type: string
        - name: name
          in: query
          description: ФИО
          required: false
          explode: true
          schema:
            type: string
        - name: account
          in: query
          description: Номер лицевого счета
          required: false
          explode: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginationResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Users"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalError"

    post:
      summary: "Создать пользователя"
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUser"
        '400':
          $ref: "#/components/responses/BadRequest"
        '409':
          $ref: "#/components/responses/Conflict"
        '500':
          $ref: "#/components/responses/InternalError"

  /orders:
    get:
      tags:
        - Orders
      summary: "Список заказов"
      security:
        - bearerAuth: []
      parameters:
        - { in: query, name: page, schema: { type: integer } }
        - { in: query, name: limit, schema: { type: integer } }
        - {name: manager_id, in: query, description: Идентификатор менеджера, required: false, explode: true, schema: { type: string }}
        - {name: created_at, in: query, description: Дата создания, required: false, explode: true, schema: { type: string }}
        - {name: closed_at, in: query, description: Дата закрытия, required: false, explode: true, schema: { type: string }}
        - {name: updated_at, in: query, description: Дата последнего обновления, required: false, explode: true, schema: { type: string }}
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PaginationResult"
                  - type: object
                    properties:
                      results:
                        type: array
                        items:
                          $ref: "#/components/schemas/Orders"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalError"

  /orders/{id}:
    get:
      summary: "Заказ"
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          description: идентификатор заказа
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalError"

# TODO реализовать запросы
#  как фиксировать первый реквестид? будет ли отдельный сервис судя по ERD
#  слишком много будет роутов если использовать идент клиента в URL...
#  POST /orders/
#  DELETE PATCH /orders/{id}

#  источник обращения
#  GET POST  /requests/
#  GET PATCH /requests/{id}
#  GET /requests/{id}/orders
#  GET /requests/{id}/tasks

#  /tasks/?filter[clients]={ids},filter[orders]={ids}
#  /tasks/{id}
#  /orders/{id}/tasks
#  /tasks/dashboard - тут не нужны все тикеты из беклога например и завершенные... подумать
#  /tasks/my - только текущего юзера
#  /services - список услуг
#  /users/roles

#  /clients/?requests=[] ???

# upload вынести в handlers?
# где видим договор и данные контрагента в клиенте? ДА!
# https://learn.microsoft.com/en-us/rest/api/partner-center/manage-orders/get%20a%20list%20of%20products%20(by%20customer)
# https://www.jetbrains.com/help/youtrack/devportal/resource-api-articles-articleID-comments.html